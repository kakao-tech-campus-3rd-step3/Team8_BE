import ws from 'k6/ws';
import { check, sleep } from 'k6';
import { Counter, Trend } from 'k6/metrics';

// --- 테스트 환경 설정 ---
const PLAN_IDS = [1, 2, 3, 4, 5];
const BASE_URL = 'ws://localhost:8080/ws'; // WebSocket 엔드포인트

// --- 사용자 정의 지표 ---
const errorCounter = new Counter('errors_total');
const msgLatency = new Trend('message_latency', true); // 메시지 지연 시간 측정 지표

// --- 부하 시나리오 설정 (계단식 부하) ---
export const options = {
    scenarios: {
        step_loading_scenario: {
            executor: 'ramping-vus',
            startVUs: 0,
            stages: [
                // 1단계: 200명까지 30초간 증가 후 30분간 유지
                { duration: '30s', target: 200 },
                { duration: '30s', target: 200 },
                // 2단계: 400명까지 30초간 증가 후 30분간 유지
                { duration: '30s', target: 400 },
                { duration: '30s', target: 400 },
                // 3단계: 600명까지 30초간 증가 후 30분간 유지
                { duration: '30s', target: 600 },
                { duration: '30s', target: 600 },
                // 4단계: 800명까지 30초간 증가 후 30분간 유지
                { duration: '30s', target: 800 },
                { duration: '30s', target: 800 },
                // 5단계: 1000명까지 30초간 증가 후 30분간 유지
                { duration: '30s', target: 1000 },
                { duration: '30s', target: 1000 },
                // 종료: 30초에 걸쳐 모든 사용자 감소
                { duration: '30s', target: 0 },
            ],
        },
    },
    thresholds: {
        'errors_total': ['count<50'],
        'checks': ['rate>0.95'],
        'message_latency': ['p(95)<500'], // 메시지 왕복 지연 95% < 500ms
    },
};

// --- STOMP 프레임 전송 유틸 ---
const stompSend = (socket, command, destination, body = '', extraHeaders = {}) => {
    const headers = { destination, ...extraHeaders };
    if (body) {
        headers['content-type'] = 'application/json';
        headers['content-length'] = body.length;
    }
    const frame = `${command}\n${Object.entries(headers)
        .map(([k, v]) => `${k}:${v}`)
        .join('\n')}\n\n${body}\0`;
    socket.send(frame);
};

// --- 메인 시나리오 ---
export default function () {
    const planId = PLAN_IDS[__VU % PLAN_IDS.length];
    const url = `${BASE_URL}`;

    const res = ws.connect(url, {}, function (socket) {
        let isConnected = false;
        let lastSend = 0;

        socket.on('open', () => {
            const connectFrame = 'CONNECT\naccept-version:1.2\nheart-beat:10000,10000\n\n\0';
            socket.send(connectFrame);
        });

        socket.on('message', (rawMsg) => {
            if (rawMsg.includes('CONNECTED')) {
                isConnected = true;

                // --- 구독 ---
                stompSend(socket, 'SUBSCRIBE', `/topic/plans/${planId}/waypoints`, '', { id: `sub-wp-${__VU}` });
                stompSend(socket, 'SUBSCRIBE', `/topic/plans/${planId}/memos`, '', { id: `sub-memo-${__VU}` });
                stompSend(socket, 'SUBSCRIBE', `/topic/plans/${planId}/routes`, '', { id: `sub-route-${__VU}` });
                stompSend(socket, 'SUBSCRIBE', `/user/queue/errors`, '', { id: `sub-error-${__VU}` });

                // --- 2초마다 메시지 전송 ---
                socket.setInterval(() => {
                    const payload = {
                        name: `Memo VU=${__VU} Iter=${__ITER}`,
                        description: 'Generated by k6',
                        address: "abcabcabc",
                        startTime: new Date().toISOString(),
                        endTime: new Date().toISOString(),
                        locationCategory: 'DEFAULT',
                        xPosition: Math.random() * 800,
                        yPosition: Math.random() * 600,
                    };
                    lastSend = Date.now();
                    stompSend(socket, 'SEND', `/app/plans/${planId}/waypoints/create`, JSON.stringify(payload));
                }, 2000); // 메시지 전송 주기를 2초로 변경
            } else if (rawMsg.includes('ERROR')) {
                console.error(`STOMP ERROR: ${rawMsg}`);
                errorCounter.add(1);
            } else if (rawMsg.includes('MESSAGE')) {
                // 서버 → 클라이언트 메시지 응답 도착 → 지연 측정
                if (lastSend > 0) {
                    msgLatency.add(Date.now() - lastSend);
                }
            }
        });

        socket.on('error', (e) => {
            console.error(`Socket error: ${e.error()}`);
            errorCounter.add(1);
        });
    });

    check(res, { 'WebSocket connection successful': (r) => r && r.status === 101 });
}